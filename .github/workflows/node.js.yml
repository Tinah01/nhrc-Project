# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: AWS auto-deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install dependencies and deploy artifacts
      run: |
        npm install
        npm run build --if-present
    - uses: appleboy/scp-action@master
      if: success()
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        source: "dist/*"
        target: ${{ secrets.TARGET }}
        overwrite: true
        port: ${{ secrets.PORT }}
    - uses: appleboy/ssh-action@master
      if: success()
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: |
          if ! sudo ls /etc/nginx/sites-available | grep nhrc.conf
          then
            echo "nginx config not found, creating..."
            echo "server {
              listen 80;
              server_name ;

          location /api/ {
                  proxy_pass http://localhost:5173;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
          }

          server {
              listen [::]:80;
              listen 80;
              server_name ;
          }" > /home/ubuntu/nhrc.conf
            sudo cp /home/ubuntu/nhrc.conf /etc/nginx/sites-available/
            sudo ln -s /etc/nginx/sites-available/nhrc.conf /etc/nginx/sites-enabled/
            sudo systemctl restart nginx
          else
            echo "nginx config already exists, skipping..."
          
          if ! command -v pm2 
          then
            echo "pm2 could not be found, installing..."
            npm install pm2 -g
            if ! pm2 list | grep -q "frontend"
            then
              echo "pm2 process not found, starting..."
              pm2 start /home/ubuntu/dist --name frontend -- run start
            else
              echo "pm2 process already exists, skipping..."
              pm2 restart frontend
          else
            if ! pm2 list | grep -q "frontend"
            then
              echo "pm2 process not found, starting..."
              pm2 start /home/ubuntu/dist --name frontend -- run start
            else
              echo "pm2 process already exists, skipping..."
              pm2 restart frontend
            fi
          fi
          

            